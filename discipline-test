#!/usr/bin/python3
#+
# This script exercises the discipline.c extension module,
# demonstrating the error-recovery techniques implemented therein.
# Each exercise collects weak references to elements of a Python
# structure before passing it to a C method. After trapping any raised
# exception, references to the structure and returned result are
# nulled out, and then the weak references are checked to ensure that
# all the ones that should have disappeared have indeed done so.
#
# Copyright 2020 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# This code is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import weakref
# built from accompanying discipline.c
from discipline import \
    ExceptMe, \
    makedict

class WeakObj :
    "wrapper around some other Python object type just so" \
    " I can have weakrefs to instances."

    def __init__(self, obj) :
        self.obj = obj
    #end __init__

    def __repr__(self) :
        "make it look like an obj."
        return \
            repr(self.obj)
    #end __repr__

#end WeakObj

def make_refs(items) :
    # makes a 2-level-deep copy of the items tuple. This way, the copy
    # can be shown to disappear, even while the original is being retained
    # as part of the loop context. Also creates a WeakSet of all items
    # in the tuple, which can be checked to confirm when the items
    # disappear.
    items_copy = tuple \
      (
        tuple((lambda : elt, lambda : WeakObj(elt))[elt != ExceptMe]() for elt in row)
        for row in items
      )
    items_set = weakref.WeakSet \
      (
        elt
        for row in items_copy
        for elt in row
        if elt != ExceptMe
      )
    return \
        items_copy, items_set
#end make_refs

casenr = 0
for items in \
      (
        (
            ("key1a", "value1a"),
            ("key2a", "value2a"),
        ),
        (
            ("key1b", "value1b"),
            "key2b",
        ),
        (
            ("key1c", "value1c"),
            ("key2c", ExceptMe),
            #(ExceptMe, "value2c"),
            ("key3c", "value3c"),
        ),
        (
            ("key1d", "value1d"),
            ("key2d", "value2d", "extra2d"),
        ),
        (
            ("key1e", "value1e"),
            ("key2e", "value2e"),
            ("key3e", "value3e"),
        ),
      ) \
:
    casenr += 1
    sys.stdout.write("* Case %d\n" % casenr)
    items, remaining = make_refs(items)
    sys.stdout.write("before: len(weakset) = %d\n" % len(remaining))
    try :
        result = makedict(items, "case %d" % casenr)
    except (ValueError, TypeError) as gotcha :
        sys.stdout.write("Exception %s\n" % repr(gotcha))
        result = None
    else :
        remaining.add(WeakObj(result))
    #end try
    result = None
    items = None
    sys.stdout.write("after: len(weakset) = %d\n" % len(remaining))
#end for
