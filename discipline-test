#!/usr/bin/python3
#+
# This script exercises the discipline.c extension module,
# demonstrating the error-recovery techniques implemented therein.
# Each exercise collects weak references to elements of a Python
# structure before passing it to a C method. After trapping any raised
# exception, references to the structure and returned result are
# nulled out, and then the weak references are checked to ensure that
# all the ones that should have disappeared have indeed done so.
#
# Copyright 2020 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# This code is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import weakref
import discipline # built from accompanying discipline.c

class WeakObj :
    "wrapper around some other Python object type just so" \
    " I can have weakrefs to instances."

    def __init__(self, obj) :
        self.obj = obj
    #end __init__

    def __repr__(self) :
        "make it look like an obj."
        return \
            repr(self.obj)
    #end __repr__

#end WeakObj

def make_weakrefs(items) :
    flattened = \
      (
            set([i[0] for i in items if i[0] != discipline.ExceptMe]
        +
            [i[1] for i in items if i[1] != discipline.ExceptMe])
      )
    return \
        weakref.WeakSet(flattened)
#end make_weakrefs

# Note: trying to refactor following repeated code into a loop doesn’t
# work -- references to objects don’t go away immediately!

sys.stdout.write("* Case 1\n")
items = \
    (
        (WeakObj("key1a"), WeakObj("value1a")),
        (WeakObj("key2a"), WeakObj("value2a")),
    )
remaining = make_weakrefs(items)
sys.stdout.write("before: len(weakset) = %d\n" % len(remaining))
try :
    result = discipline.makedict(items, "case 1")
except (ValueError, TypeError) as gotcha :
    sys.stdout.write("Exception %s\n" % repr(gotcha))
    result = None
else :
    remaining.add(WeakObj(result))
#end try
result = None
items = None
sys.stdout.write("after: len(weakset) = %d\n" % len(remaining))

sys.stdout.write("* Case 2\n")
items = \
    (
        (WeakObj("key1b"), WeakObj("value1b")),
        (WeakObj("key2b"), WeakObj("value2b")),
    )
remaining = make_weakrefs(items)
sys.stdout.write("before: len(weakset) = %d\n" % len(remaining))
try :
    result = discipline.makedict(items, None)
except (ValueError, TypeError) as gotcha :
    sys.stdout.write("Exception %s\n" % repr(gotcha))
    result = None
else :
    remaining.add(WeakObj(result))
#end try
result = None
items = None
sys.stdout.write("after: len(weakset) = %d\n" % len(remaining))

sys.stdout.write("* Case 3\n")
items = \
    (
        (WeakObj("key1c"), WeakObj("value1c")),
        (WeakObj("key2c"), discipline.ExceptMe),
        #(discipline.ExceptMe, WeakObj("value2c")),
        (WeakObj("key3c"), WeakObj("value3c")),
    )
remaining = make_weakrefs(items)
sys.stdout.write("before: len(weakset) = %d\n" % len(remaining))
try :
    result = discipline.makedict(items, "case 3")
except (ValueError, TypeError) as gotcha :
    sys.stdout.write("Exception %s\n" % repr(gotcha))
    result = None
else :
    remaining.add(WeakObj(result))
#end try
result = None
items = None
sys.stdout.write("after: len(weakset) = %d\n" % len(remaining))

sys.stdout.write("* Case 4\n")
items = \
    (
        (WeakObj("key1d"), WeakObj("value1d")),
        (WeakObj("key2d"), WeakObj("value2d"), WeakObj("extra2d")),
    )
remaining = make_weakrefs(items)
sys.stdout.write("before: len(weakset) = %d\n" % len(remaining))
try :
    result = discipline.makedict(items, "case 4")
except (ValueError, TypeError) as gotcha :
    sys.stdout.write("Exception %s\n" % repr(gotcha))
    result = None
else :
    remaining.add(WeakObj(result))
#end try
result = None
items = None
sys.stdout.write("after: len(weakset) = %d\n" % len(remaining))
